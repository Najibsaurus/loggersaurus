{"version":3,"sources":["../src/types.ts","../src/index.ts"],"names":["LogLevel","Logger","config","level","data","formattedLog","logger"],"mappings":"aAAO,IAAKA,CAAAA,CAAAA,CAAAA,CAAAA,GACVA,CAAAA,CAAA,IAAA,CAAO,MAAA,CACPA,CAAAA,CAAA,IAAA,CAAO,MAAA,CACPA,CAAAA,CAAA,KAAA,CAAQ,OAAA,CACRA,CAAAA,CAAA,KAAA,CAAQ,QAJEA,CAAAA,CAAAA,EAAAA,CAAAA,EAAA,EAAA,ECKZ,IAAMC,CAAAA,CAAN,KAAa,CAGX,WAAA,CAAYC,CAAAA,CAAuB,EAAC,CAAG,CACrC,IAAA,CAAK,OAAA,CAAUA,CAAAA,CAAO,OAAA,EAAW,WACnC,CAEQ,IAAIC,CAAAA,CAAiBC,CAAAA,CAAqB,CAChD,IAAMC,CAAAA,CAA6B,CACjC,SAAA,CAAW,IAAI,IAAA,EAAK,CAAE,WAAA,EAAY,CAClC,KAAA,CAAAF,CAAAA,CACA,OAAA,CAAS,IAAA,CAAK,QACd,MAAA,CAAQC,CAAAA,CAAK,MAAA,CACb,OAAA,CAASA,CAAAA,CAAK,OAChB,CAAA,CAEA,GAAI,QAAQ,GAAA,CAAI,QAAA,GAAa,YAAA,CAC3B,OAAA,CAAQ,GAAA,CAAI,IAAA,CAAK,SAAA,CAAUC,CAAY,CAAC,CAAA,CAAA,KACnC,CASL,OAAA,CAAQ,GAAA,CACN,4HAAA,CACAA,CACF,EACF,CACF,CAEA,IAAA,CAAKD,CAAAA,CAAe,CAClB,IAAA,CAAK,GAAA,CAAA,MAAA,CAAmBA,CAAI,EAC9B,CACA,IAAA,CAAKA,CAAAA,CAAe,CAClB,IAAA,CAAK,GAAA,CAAA,MAAA,CAAmBA,CAAI,EAC9B,CACA,KAAA,CAAMA,CAAAA,CAAe,CACnB,IAAA,CAAK,GAAA,CAAA,OAAA,CAAoBA,CAAI,EAC/B,CACA,KAAA,CAAMA,CAAAA,CAAe,CACnB,IAAA,CAAK,GAAA,CAAA,OAAA,CAAoBA,CAAI,EAC/B,CACF,CAAA,CAEaE,CAAAA,CAAS,IAAIL,CAAAA,CAAO,CAAE,OAAA,CAAS,OAAA,CAAQ,GAAA,CAAI,oBAAqB,CAAC","file":"index.js","sourcesContent":["export enum LogLevel {\n  INFO = \"INFO\",\n  WARN = \"WARN\",\n  ERROR = \"ERROR\",\n  DEBUG = \"DEBUG\",\n}\n\nexport type LogData = {\n  action: string;\n  details?: unknown;\n};\n\nexport type LoggerConfig = {\n  service?: string;\n};\n\nexport type FormattedLog = {\n  timestamp: string;\n  level: LogLevel;\n  service: string;\n  action: string;\n  details?: unknown;\n};\n","import type { LoggerConfig, LogData, FormattedLog } from \"./types\";\nimport { LogLevel } from \"./types\";\n\nexport * from \"./types\";\n\nclass Logger {\n  private service: string;\n\n  constructor(config: LoggerConfig = {}) {\n    this.service = config.service || \"next-app\";\n  }\n\n  private log(level: LogLevel, data: LogData): void {\n    const formattedLog: FormattedLog = {\n      timestamp: new Date().toISOString(),\n      level,\n      service: this.service,\n      action: data.action,\n      details: data.details,\n    };\n\n    if (process.env.NODE_ENV === \"production\") {\n      console.log(JSON.stringify(formattedLog));\n    } else {\n      const colorMap = {\n        [LogLevel.INFO]: \"\\x1b[34m\", // Blue\n        [LogLevel.WARN]: \"\\x1b[33m\", // Yellow\n        [LogLevel.ERROR]: \"\\x1b[31m\", // Red\n        [LogLevel.DEBUG]: \"\\x1b[35m\", // Magenta\n        reset: \"\\x1b[0m\",\n      };\n      const color = colorMap[level] || colorMap.reset;\n      console.log(\n        `<span class=\"math-inline\">\\{color\\}\\[</span>{level}] - <span class=\"math-inline\">\\{formattedLog\\.action\\}</span>{colorMap.reset}`,\n        formattedLog\n      );\n    }\n  }\n\n  info(data: LogData) {\n    this.log(LogLevel.INFO, data);\n  }\n  warn(data: LogData) {\n    this.log(LogLevel.WARN, data);\n  }\n  error(data: LogData) {\n    this.log(LogLevel.ERROR, data);\n  }\n  debug(data: LogData) {\n    this.log(LogLevel.DEBUG, data);\n  }\n}\n\nexport const logger = new Logger({ service: process.env.NEXT_PUBLIC_APP_NAME });\nexport { Logger };\n"]}